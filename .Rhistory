<<<<<<< HEAD
data<-permTestSamp(A,B,999,stat="ks")
simp_mu_data[j] <- mean(c(data[2:1000],data[1]) >= data[1])
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
source('~/Google Drive/comp_stat/project/Statistical-Computing-Group-Project (1)/permTestSamp.R')
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.01
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
data<-permTestSamp(A,B,999,stat="ks")
simp_mu_data[j] <- mean(c(data[2:1000],data[1]) >= data[1])
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
source('~/Google Drive/comp_stat/project/Statistical-Computing-Group-Project (1)/permTestSamp.R')
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.01
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
data<-permTestSamp(A,B,999,stat="ks")
simp_mu_data[j] <- mean(c(data[2:1000],data[1]) >= data[1])
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
source('~/Google Drive/comp_stat/project/Statistical-Computing-Group-Project (1)/permTestSamp.R')
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.01
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
data<-permTestSamp(A,B,999,stat="ks")
simp_mu_data[j] <- mean(c(data[2:1000],data[1]) >= data[1])
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
sizes=c(NROW(A),NROW(B))
rowNumbers<-1:sum(sizes)
source('~/Google Drive/comp_stat/project/Statistical-Computing-Group-Project (1)/permTestSamp.R')
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.01
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
data<-permTestSamp(A,B,999,stat="ks")
simp_mu_data[j] <- mean(c(data[2:1000],data[1]) >= data[1])
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.05
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
data<-permTestSamp(A,B,999,stat="ks")
simp_mu_data[j] <- mean(c(data[2:1000],data[1]) >= data[1])
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.01
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
R <- 999
#z <- c(A,B)
K <- 1:(m+n)
D <- numeric(R)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
z <- rbind(A,B)
DO <- ks.test(A,B,exact=F)$statistic
for (l in 1:999) {
#indices sample
k <- sample(K,m,replace=F)
x1 <- z[k]
y1 <- z[-k]
D[l] <- ks.test(x1,y1,exact=F)$statistic
}
simp_mu_data[j] <- mean(c(DO,D) >= DO)
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.05
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
R <- 999
#z <- c(A,B)
K <- 1:(m+n)
D <- numeric(R)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
z <- rbind(A,B)
DO <- ks.test(A,B,exact=F)$statistic
for (l in 1:999) {
#indices sample
k <- sample(K,m,replace=F)
x1 <- z[k]
y1 <- z[-k]
D[l] <- ks.test(x1,y1,exact=F)$statistic
}
simp_mu_data[j] <- mean(c(DO,D) >= DO)
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.05
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
data<-permTestSamp(A,B,999,stat="ks")
simp_mu_data[j] <- mean(c(data[2:1000],data[1]) >= data[1])
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.05
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
data<-permTestSamp(A,B,999,stat="ks")
simp_mu_data[j] <- mean(c(data[2:1000],data[1]) >= data[1])
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.01
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
R <- 999
#z <- c(A,B)
K <- 1:(m+n)
D <- numeric(R)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
z <- rbind(A,B)
DO <- ks.test(A,B,exact=F)$statistic
for (l in 1:999) {
#indices sample
k <- sample(K,m,replace=F)
x1 <- z[k]
y1 <- z[-k]
D[l] <- ks.test(x1,y1,exact=F)$statistic
}
simp_mu_data[j] <- mean(c(DO,D) >= DO)
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.01
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
data<-permTestSamp(A,B,999,stat="ks")
simp_mu_data[j] <- mean(c(data[2:1000],data[1]) >= data[1])
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
source('~/Google Drive/comp_stat/project/Statistical-Computing-Group-Project (1)/permTestBoot.R')
source('~/Google Drive/comp_stat/project/Statistical-Computing-Group-Project (1)/permTestSamp.R')
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.01
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
data<-permTestSamp(A,B,999,stat="ks")
simp_mu_data[j] <- mean(c(data[2:1000],data[1]) >= data[1])
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
source('~/Google Drive/comp_stat/project/Statistical-Computing-Group-Project (1)/permTestSamp.R')
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.01
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
data<-permTestSamp(A,B,999,stat="ks")
simp_mu_data[j] <- mean(c(data[2:1000],data[1]) >= data[1])
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
source('~/Google Drive/comp_stat/project/Statistical-Computing-Group-Project (1)/permTestSamp.R')
#################################################################################################################
#Main script to run test of methods
library(MASS)
source('permTestBoot.R')  #include the file which contains the function definitions for the statistics
#testing some univariate  data
m <- 50
n <- 50
thismany<-10
delta<-.01
min_mu<-0
max_mu<-.5
min_var<-0
max_var<-5
alpha<-.05
#steps_mu<-is.integer((max_mu-min_mu)/delta)
steps_mu<-seq(min_mu,max_mu,delta)
steps_var<-is.integer((max_var-min_var)/delta)
simp_mu_data<-numeric(thismany)
percent_simp_mu<-as.numeric(steps_mu)
#Std normal
A<-rnorm(n,0,1)
# Start the clock!
ptm <- proc.time()
for(i in 1:length(steps_mu)){
for(j in 1:thismany){
B<-rnorm(m,steps_mu[i],1)
data<-permTestSamp(A,B,999,stat="ks")
simp_mu_data[j] <- mean(c(data[2:1000],data[1]) >= data[1])
}
percent_simp_mu[i]<-(sum(simp_mu_data>=alpha))/length(thismany)
}
# Stop the clock
proc.time() - ptm
ptm
=======
x<- sample(1:10, replace = T,20)
hist(x)
dist(x)
plot(x)
help(rnorm)
rnorm(10, mean = c(2,0), sd=1)
rnorm(10, mean = c(2,0), sd=1)
Sigma <- matrix(c(1,0,0,1),2,2)
mvrnorm(10,c(2,0),Sigma)
library(MASS)
mvrnorm(10,c(2,0),Sigma)
mvrnorm(10,c(2,0),Sigma)
A <- mvrnorm(10,c(2,0),Sigma)
plot(A)
A <- mvrnorm(250,c(2,0),Sigma)
plot(A)
B <- mvrnorm(250,c(0,0),Sigma)
plot(A,B)
plot(A,color="red",B,color="blue")
help(plot)
plot(A,color="red")
plot(A,col="red")
plot(A,col="red",B,col="blue")
plot(A,B,col=c("red","blue")
)
plot(A,B,col=c("red","blue"))
B <- mvrnorm(250,c(-2,0),Sigma)
plot(A,B,col=c("red","blue"))
B <- mvrnorm(250,c(-2,-2),Sigma)
plot(A,B,col=c("red","blue"))
plot(A,B,col=c("red","blue"),xlim=c(-4,4))
plot(A,B,col=c("red","blue"),xlim=c(-4,4),ylim(-4,4))
plot(A,B,col=c("red","blue"),xlim=c(-4,4),ylim=(-4,4))
plot(A,B,col=c("red","blue"),xlim=c(-4,4),ylim=c(-4,4))
A <- mvrnorm(250,c(2,2),Sigma)
plot(A,B,col=c("red","blue"),xlim=c(-4,4),ylim=c(-4,4))
B <- mvrnorm(250,c(-2,-2),Sigma)
plot(A,B,col=c("red","blue"),xlim=c(-4,4),ylim=c(-4,4))
A[1]
A[1,]
A[,1]
plot(A[,1],A[,2],B[,1],B[,2],col=c("red","blue"),xlim=c(-4,4),ylim=c(-4,4))
help(plot)
plot(A[,1],A[,2],col="red",xlim=c(-4,4),ylim=c(-4,4))
par(new=T)
plot(B[,1],B[,2],col="blue",xlim=c(-4,4),ylim=c(-4,4))
source('~/Documents/twosamplemv.R')
source('~/Documents/twosamplemv.R')
help(par)
chisq.test(A,B)
help("chisq.test")
ks.test(A,B,exact=F)/$statistic
ks.test(A,B,exact=F)$statistic
I = 1:6
k = c(1,2,6)
z = c(1,4,9,16,25,36)
z[k]
z[-k]
help(bind)
help("rbind")
try <- matrix((2,2,2,2),2,2)
try1 <- matrix((2,2,2,2),2,2)
try1 <- matrix(c(2,2,2,2),2,2)
try2 <- matrix(c(3,3,3,3),2,2)
try1
try2
rbind(try1,try2)
help(clear)
help("clear")
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
D
z
z
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
z
source('~/Documents/kolmTest.R')
z
A
B
D
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
D
source('~/Documents/kolmTest.R')
help(options)
source('~/Documents/permTest.R')
help(if)
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
D
help(abs)
help(mean)
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
x1
x2
y1
S
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
mu1
mu2
x1
A
z
k
z[k]
try1
try1 <- matrix(c(2,2,2,2),2,2)
try2 <- matrix(c(3,3,3,3),2,2)
tryboth <- rbind(try1,try2)
tryboth
try2 <- matrix(c(5,6,7,8),2,2)
try1 <- matrix(c(1,2,3,4),2,2)
tryboth <- rbind(try1,try2)
tryboth
t <- c(2,4)
tryboth[t]
tryboth[t,]
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
S
source('~/Documents/permTest.R')
S
x1
x2
y1
mu1
mu2
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/kolmTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Documents/permTest.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
library(MASS)
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
library(MASS)
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
A <- matrix(0,2,2)
m <- 3
A <- matrix(0,2*m,2*m)
A
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
A <- matrix(0,2*m,2*m)
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
A
B
uMMDDecision(A,B,3,99)
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
uMMDDecision(A,B,3,99)
uMMDDecision(A,B,3,99)
uMMDDecision(A,B,3,99)
source('~/Statistical-Computing-Group-Project/mmdStats.R')
uMMDDecision(A,B,3,99)
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
blur <- 3
blur
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
(2 < 5)
(2 =< 5)
(2 <= 5)
as.numeric(2 <= 5)
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/mmdStats.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
setwd("~/Statistical-Computing-Group-Project")
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
df
plot(df)
df
ggplot(data=df,aes(steps_mu,y=value,color=variable)) +
geom_line(aes(y = percent_mu_ks, col = "percent_mu_ks")) +
geom_line(aes(y = percent_mu_simp, col = "percent_mu_simp")) +
geom_line(aes(y = percent_mu_nn, col = "percent_mu_nn")) +
geom_line(aes( y = percent_mu_edist,col = "percent_mu_edist")) +
#geom_line(aes( y = percent_mu_mmd,col = "percent_mu_mmd")) +
ggtitle("50 variables")
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
Diff
a
b
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
A
B
uMMDDecision(A,B,m,R)
m
R
uMMDDecision(A,B,m,R)
uMMDDecision(A,B,m,R)
uMMDDecision(A,B,m,R)
A
B
rbind(A,B)
A
uMMDDecision(A,B,m,R)
Z
source('~/Statistical-Computing-Group-Project/mmdStats.R')
uMMDDecision(A,B,m,R)
uMMDDecision(A,B,m,R)
uMMDDecision(A,B,m,R)
A
B
rbind(A,B)
cbind(A,B)
c(A,B)
source('~/Statistical-Computing-Group-Project/mmdStats.R')
uMMDDecision(A,B,m,R)
uMMDDecision(A,B,m,R)
source('~/Statistical-Computing-Group-Project/oneDimComparison.R')
>>>>>>> refs/remotes/Spstolar/myMacBranch
